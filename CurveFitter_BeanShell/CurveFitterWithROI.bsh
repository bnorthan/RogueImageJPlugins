// Simple Example showing how to call the ImageJ CurveFitter from
// a beanshell script and produce a plot of the fitted line. 
//
// Inspired by this discussion:
// http://imagej.1557.x6.nabble.com/Running-a-Gaussian-Fit-in-a-Beanshell-Script-td5007134.html
// and this one:
// http://imagej.1557.x6.nabble.com/Line-ROIs-and-Fit-a-few-quot-how-to-quot-questions-in-ImageJ-Javascript-td5007161.html

// get the ROI manager... assuming it exists and has atleast 1 roi 
RoiManager manager=RoiManager.getInstance();
Roi roi=manager.getRoisAsArray()[0];

// get the active image
ip = WindowManager.getCurrentImage();

// give active image to roi
roi.setImage(ip);

// now we can get the pixels
double[] y=roi.getPixels();
double[] x=new double[y.length];

// just make x 0,1,2,3... etc.
for (int i=0;i<y.length;i++)
{
	x[i]=i;
}

// create a fitter
CurveFitter fitter=new CurveFitter(x, y);

// call the doFit function pass constant representing type of fit
// see (http://imagej.nih.gov/ij/developer/api/ij/measure/CurveFitter.html) 
// for more options
fitter.doFit(CurveFitter.POLY3);

// get results
double[] params=fitter.getParams();
double[] xPoints=fitter.getXPoints();
double[] yPoints=fitter.getYPoints();

print("Params:");
// loop printing params 
for (double d:params)
{
	print(d);
}

print("\nPoints:");
// loop printing the points of the fitted line
for (int i=0;i<xPoints.length;i++)
{
	print("x: "+xPoints[i]+" y: "+yPoints[i]);
}

// use the static plot function from the fitter class to produce an output plot.
ij.plugin.frame.Fitter.plot(fitter);
